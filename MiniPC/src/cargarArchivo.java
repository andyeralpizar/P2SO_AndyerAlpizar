
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.List;
import java.util.Stack;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author
 */
public class cargarArchivo extends javax.swing.JFrame {

    private static File[] archivos;
    boolean archivoValido = false;
    ArrayList<String[]> espaciosMemoria = new ArrayList<>(100);
    private static PC miPC;
    int posIniReservada, posIni;
    int posActualReservada, posActual;
    int direccionMemoriaReservada=0;
    int direccionMemoriaNormal = 21*5;
    
    estadisticas fEstadisticas = new estadisticas();
    int instruccionActual;//ir
    int pesoEjecutado = 0;
    int indiceMemoriaBcpActual = 0;
    int cantProcesosEjecutados = 0 ;
    boolean terminarEjecucion = false;
    static Dictionary<String, Integer> pesosInstruccion;
    static{
        pesosInstruccion= new Hashtable<>();
        pesosInstruccion.put("LOAD", 2); //0001
        pesosInstruccion.put("STORE",2);//0010
        pesosInstruccion.put("MOV",1);//0011
        pesosInstruccion.put("ADD",3);//0100
        pesosInstruccion.put("SUB",3);
        pesosInstruccion.put("INC",1);
        pesosInstruccion.put("DEC", 1);
        pesosInstruccion.put("SWAP", 1);
        pesosInstruccion.put("INT", 2);
        pesosInstruccion.put("JMP", 2);
        pesosInstruccion.put("CMP", 2);
        pesosInstruccion.put("JE", 2);
        pesosInstruccion.put("JNE", 2);
        pesosInstruccion.put("PARAM", 3);
        pesosInstruccion.put("PUSH", 1);
        pesosInstruccion.put("POP", 1);
    }
    Timer timer;
    
    /*
     * Crea una ventana que permite escoger un archivo
     */
    public cargarArchivo() {
        initComponents();      
        miPC  =  new PC();        
        inicializarTablas(miPC.getEspacioMemoria(), miPC.getEspacioDisco());
  
    }

    public static PC getMiPC() {
        return miPC;
    }

    public static void setArchivos(File[] pArchivos) {
        archivos = pArchivos;
    }

    
    //inicializa las filas de la tabla que representa a la memoria
    public static  void inicializarTablas(int espacioMemoria, int espacioDisco){
        for (int i = 0; i < espacioMemoria; i++) {
            tablaMemoria.setValueAt(i, i, 0);
            tablaMemoria.disable();
        }
        
        for (int i = 0; i < espacioDisco; i++) {
            tablaDisco.setValueAt(i, i, 0);
            tablaDisco.disable();
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        botSiguiente = new javax.swing.JButton();
        cargarArchivo = new javax.swing.JButton();
        ejecutar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        axInput = new javax.swing.JTextField();
        bxInput = new javax.swing.JTextField();
        cxInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        pcInput = new javax.swing.JTextField();
        acInput = new javax.swing.JTextField();
        irInput = new javax.swing.JTextField();
        dxInput = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        bcpActualInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMemoria = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaProcesos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaDisco = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaejecucion = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        pantalla = new javax.swing.JTextArea();
        inputPantalla = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mini PC");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel3.setPreferredSize(new java.awt.Dimension(1280, 720));

        botSiguiente.setBackground(new java.awt.Color(187, 187, 187));
        botSiguiente.setText("Siguiente");
        botSiguiente.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botSiguiente.setBorderPainted(false);
        botSiguiente.setPreferredSize(new java.awt.Dimension(100, 30));
        botSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botSiguienteActionPerformed(evt);
            }
        });

        cargarArchivo.setText("Cargar programas");
        cargarArchivo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cargarArchivo.setBorderPainted(false);
        cargarArchivo.setPreferredSize(new java.awt.Dimension(100, 30));
        cargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarArchivoActionPerformed(evt);
            }
        });

        ejecutar.setText("Ejecutar");
        ejecutar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ejecutar.setBorderPainted(false);
        ejecutar.setPreferredSize(new java.awt.Dimension(100, 30));
        ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(248, 247, 249));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("AX");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("BX");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("CX");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("DX");

        axInput.setPreferredSize(new java.awt.Dimension(100, 30));
        axInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                axInputActionPerformed(evt);
            }
        });

        bxInput.setPreferredSize(new java.awt.Dimension(100, 30));

        cxInput.setPreferredSize(new java.awt.Dimension(100, 30));
        cxInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxInputActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("PC");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("AC");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("IR");

        pcInput.setPreferredSize(new java.awt.Dimension(100, 30));

        acInput.setPreferredSize(new java.awt.Dimension(100, 30));

        irInput.setPreferredSize(new java.awt.Dimension(100, 30));
        irInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                irInputActionPerformed(evt);
            }
        });

        dxInput.setPreferredSize(new java.awt.Dimension(100, 30));
        dxInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dxInputActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("BCP  actual");

        bcpActualInput.setBorder(null);
        bcpActualInput.setPreferredSize(new java.awt.Dimension(100, 30));
        bcpActualInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcpActualInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cxInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bxInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(axInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(irInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pcInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(acInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dxInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(bcpActualInput, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(bcpActualInput, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(pcInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(acInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7)
                    .addComponent(irInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(axInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(bxInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cxInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(dxInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, pcInput});

        tablaMemoria.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tablaMemoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {"", null},
                {"", null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "", "Memoria"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaMemoria.setColumnSelectionAllowed(true);
        tablaMemoria.setRowHeight(30);
        tablaMemoria.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tablaMemoria.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaMemoria);
        tablaMemoria.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tablaMemoria.getColumnModel().getColumnCount() > 0) {
            tablaMemoria.getColumnModel().getColumn(0).setMinWidth(40);
            tablaMemoria.getColumnModel().getColumn(0).setPreferredWidth(40);
            tablaMemoria.getColumnModel().getColumn(0).setMaxWidth(40);
            tablaMemoria.getColumnModel().getColumn(1).setResizable(false);
        }

        tablaProcesos.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tablaProcesos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {"", null, null},
                {"", null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "", "Nombre", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProcesos.setColumnSelectionAllowed(true);
        tablaProcesos.setRowHeight(30);
        tablaProcesos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tablaProcesos.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tablaProcesos);
        tablaProcesos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tablaProcesos.getColumnModel().getColumnCount() > 0) {
            tablaProcesos.getColumnModel().getColumn(0).setMinWidth(40);
            tablaProcesos.getColumnModel().getColumn(0).setPreferredWidth(40);
            tablaProcesos.getColumnModel().getColumn(0).setMaxWidth(40);
            tablaProcesos.getColumnModel().getColumn(1).setResizable(false);
            tablaProcesos.getColumnModel().getColumn(2).setResizable(false);
        }

        tablaDisco.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tablaDisco.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {"", null},
                {"", null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "", "Disco"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaDisco.setColumnSelectionAllowed(true);
        tablaDisco.setRowHeight(30);
        tablaDisco.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tablaDisco.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaDisco);
        tablaDisco.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tablaDisco.getColumnModel().getColumnCount() > 0) {
            tablaDisco.getColumnModel().getColumn(0).setMinWidth(40);
            tablaDisco.getColumnModel().getColumn(0).setPreferredWidth(40);
            tablaDisco.getColumnModel().getColumn(0).setMaxWidth(40);
            tablaDisco.getColumnModel().getColumn(1).setResizable(false);
        }

        tablaejecucion.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tablaejecucion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {""},
                {""},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "CPU"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaejecucion.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaejecucion.setColumnSelectionAllowed(true);
        tablaejecucion.setEnabled(false);
        tablaejecucion.setRowHeight(30);
        tablaejecucion.setRowSelectionAllowed(false);
        tablaejecucion.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tablaejecucion.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tablaejecucion);
        tablaejecucion.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tablaejecucion.getColumnModel().getColumnCount() > 0) {
            tablaejecucion.getColumnModel().getColumn(0).setMinWidth(100);
            tablaejecucion.getColumnModel().getColumn(0).setPreferredWidth(100);
            tablaejecucion.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        pantalla.setColumns(20);
        pantalla.setRows(5);
        jScrollPane5.setViewportView(pantalla);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(cargarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                            .addComponent(jScrollPane5)
                            .addComponent(inputPantalla))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cargarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputPantalla)))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1370, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 799, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Crea un dialogo con el mensaje indicado
    //id = identificador de error
        // 1 = error de memoria
    public static void mostrarError(int id, String mensaje){
        JOptionPane.showMessageDialog(null, mensaje);
        if(id == 1) System.exit(0);

       
    }
    
    private void botSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botSiguienteActionPerformed
     
        ejecutarAccion();
       
    }//GEN-LAST:event_botSiguienteActionPerformed
    
    
    public void actualizarValorEnReservada(int offset, String valor){
        int direccion = Integer.parseInt(bcpActualInput.getText()) + offset;
        tablaMemoria.setValueAt(valor, direccion, 1);
    }
    
    //identificar el operador y llamar a la accion correspondiente ademas de determianar si el programa finaliza
    private void ejecutarAccion() {
        String[] instruccion = tablaMemoria.getValueAt(miPC.getBcpActual().getPC(), 1).toString().split("[,\\s]+");
        String operador = instruccion[0];
        pesoEjecutado += 1;
        BCP bcpActual = miPC.getBcpActual();
        visualisarPesoEjecutado(bcpActual);
        if (operador.equals("INT")) {
            miPC.getBcpActual().setEstado("En espera");
            miPC.getBcpActual().setEstadoInterrupcion(instruccion[1]);
            actualizarBCPSMemoria();
        } else {
            miPC.getBcpActual().setEstado("En ejecucion");
            miPC.getBcpActual().setEstadoInterrupcion("Preparado");
            actualizarBCPSMemoria();
        }
        tablaProcesos.setValueAt(bcpActual.getEstado(), miPC.getBcps().indexOf(bcpActual), 2);
        if (pesoEjecutado == pesosInstruccion.get(operador)) {

            if (operador.equals("LOAD")) {
                miPC.ejecutarLoad(instruccion[1]);
                actualizarInput("AC");
            } else if (operador.equals("STORE")) {
                miPC.ejecutarStore(instruccion[1]);
                actualizarInput(instruccion[1]);
            } else if (operador.equals("MOV")) {
                if (Arrays.asList(Asistente.REGISTROSVALIDOS).contains(instruccion[2])) {
                    System.out.print("true");
                    miPC.ejecutarMovRegistro(instruccion[1], instruccion[2]);
                    actualizarInput(instruccion[1]);
                } else if (Asistente.esEntero(instruccion[2])) {
                    miPC.ejecutarMov(instruccion[1], Integer.parseInt(instruccion[2]));
                    actualizarInput(instruccion[1]);
                }
            } else if (operador.equals("ADD")) {
                miPC.ejecutarAdd(instruccion[1]);
                actualizarInput("AC");
            } else if (operador.equals("SUB")) {
                miPC.ejecutarSub(instruccion[1]);
                actualizarInput("AC");
            } else if (operador.equals("INC")) {
                if (instruccion.length == 2) {
                    miPC.ejecutarINCRegistro(instruccion[1]);
                    actualizarInput(instruccion[1]);
                } else if (instruccion.length == 1) {
                    miPC.ejecutarINC();
                    actualizarInput("AC");
                }
            } else if (operador.equals("DEC")) {
                if (instruccion.length == 2) {
                    miPC.ejecutarDECRegistro(instruccion[1]);
                    actualizarInput(instruccion[1]);
                } else if (instruccion.length == 1) {
                    miPC.ejecutarDEC();
                    actualizarInput("AC");
                }
            } else if (operador.equals("SWAP")) {
                miPC.ejecutarSwap(instruccion[1], instruccion[2]);
                actualizarInput(instruccion[1]);
                actualizarInput(instruccion[2]);
            } else if (operador.equals("INT")) {
                switch (instruccion[1]) {
                    case "20H":
                        miPC.ejecutarINT20H();
                        break;
                    case "10H":
                        miPC.ejecutarINT10H();
                        pantalla.setText(">> " + Integer.toString(bcpActual.getRegistros().get("DX").getValor()));
                        //actualizarValorEnReservada(1);
                        break;
                    case "09H":
                        botSiguiente.setEnabled(false);
                        solicitarInt09H();
                        break;
                    default:
                        break;
                }
            } else if (operador.equals("JMP")) {
                ejecutarSalto(instruccion);
            } else if (operador.equals("CMP")) {
                miPC.ejecutarCMP(instruccion[1], instruccion[2]);
            } else if (operador.equals("JE")) {
                if (bcpActual.getComp()) {
                    ejecutarSalto(instruccion);
                }
            } else if (operador.equals("JNE")) {
                if (!bcpActual.getComp()) {
                    ejecutarSalto(instruccion);
                }
            } else if (operador.equals("PARAM")) {
                Stack<Integer> pila = bcpActual.getPila();
                List<String> params = Arrays.asList(instruccion).subList(1, instruccion.length);
                for (String param : params) {
                    bcpActual.agregarAPila(Integer.parseInt(param));

                }
                

            } else if (operador.equals("PUSH")) {
                miPC.ejecutarPUSH(instruccion[1]);
                actualizarInput(instruccion[1]);

            } else if (operador.equals("POP")) {
                miPC.ejecutarPOP(instruccion[1]);
                actualizarInput(instruccion[1]);

            }

            pesoEjecutado = 0;
            instruccionActual = bcpActual.getPC() + 1;

            bcpActual.setPC(instruccionActual);
            actualizarBCPSMemoria();
            pcInput.setText(Integer.toString(instruccionActual));
            try {
                irInput.setText(tablaMemoria.getValueAt(instruccionActual, 1).toString());
            } catch (Exception e) {
            }

            if (instruccionActual >= bcpActual.getAlcance() + bcpActual.getBase()) {
                System.out.println("Sguiente programa");
                siguientePrograma();
                instruccionActual = miPC.getBcpActual().getPC();
            }

        }
    }
  
    //mantiene los datos del bcp actualizados en ui 
    public void actualizarBCPSMemoria() {
        BCP bcpActual =  miPC.getBcpActual();
        tablaMemoria.setValueAt("PC: " + bcpActual.getPC(), indiceMemoriaBcpActual * 21 + 2, 1);
        tablaMemoria.setValueAt("AC: " + bcpActual.getRegistros().get("AC").getValor(), indiceMemoriaBcpActual * 21 + 3, 1);
        tablaMemoria.setValueAt("AX: " + bcpActual.getRegistros().get("AX").getValor(), indiceMemoriaBcpActual * 21 + 4, 1);
        tablaMemoria.setValueAt("BX: " + bcpActual.getRegistros().get("BX").getValor(), indiceMemoriaBcpActual * 21 + 5, 1);
        tablaMemoria.setValueAt("CX: " + bcpActual.getRegistros().get("CX").getValor(), indiceMemoriaBcpActual * 21 + 6, 1);
        tablaMemoria.setValueAt("DX: " + bcpActual.getRegistros().get("DX").getValor(), indiceMemoriaBcpActual * 21 + 7, 1);
        tablaMemoria.setValueAt("Pila 0: " + bcpActual.getPila().get(0), indiceMemoriaBcpActual * 21 + 8, 1);
        tablaMemoria.setValueAt("Pila 1: " + bcpActual.getPila().get(1), indiceMemoriaBcpActual * 21 + 9, 1);
        tablaMemoria.setValueAt("Pila 2: " + bcpActual.getPila().get(2), indiceMemoriaBcpActual * 21 + 10, 1);
        tablaMemoria.setValueAt("Pila 3: " + bcpActual.getPila().get(3), indiceMemoriaBcpActual * 21 + 11, 1);
        tablaMemoria.setValueAt("Pila 4: " + bcpActual.getPila().get(4), indiceMemoriaBcpActual * 21 + 12, 1);
        tablaMemoria.setValueAt("Estado interrupcion: " + bcpActual.getEstadoInterrupcion(), indiceMemoriaBcpActual * 21 + 16, 1);
    }
    
   
    //muestra el peso de cada paso en cpu
    public void visualisarPesoEjecutado(BCP bcpActual) {
        int indicePrueba = miPC.getBcps().indexOf(bcpActual);
        bcpActualInput.setText(Integer.toString(indicePrueba));
        agregarColumna(indicePrueba,tablaejecucion.getColumnCount());
        tablaejecucion.setValueAt("//////////", indicePrueba, tablaejecucion.getColumnCount() - 1);
    }
    
    //valida que un salto sea posible y los ejecuta
    public void ejecutarSalto(String[] instruccion) {
        int nuevaIns = miPC.getBcpActual().getPC() + Integer.parseInt(instruccion[1])-1;
        if (miPC.getBcpActual().getBase() <= nuevaIns && nuevaIns <= miPC.getBcpActual().getBase() + miPC.getBcpActual().getAlcance()) {
            System.out.println("Dentro");
            miPC.getBcpActual().setPC(nuevaIns);
        } else {
            System.out.println("Fuera de alcance");
            pantalla.setText(">> Instruccion fuera de alcance " );
        }
    }
    
    //solicita entrada de texto hasta que se presione enter y valida que sea un numero 
    public void solicitarInt09H(){
        inputPantalla.requestFocus();
        inputPantalla.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String text = inputPantalla.getText();
                if(Asistente.esEntero(text)){
                    pantalla.setText(text);
                    miPC.getBcpActual().getRegistros().get("DX").setValor(Integer.parseInt(text));
                    actualizarInput("DX");
                    botSiguiente.setEnabled(true);
                    return;
                    
                }else{
                    pantalla.setText("El valor de entrada debe ser de tipo entero");
                    solicitarInt09H();
                }

            }

        });
        inputPantalla.setText(null);
    }    
        
    //avanza al siguiente programa    
    private void siguientePrograma(){
        miPC.getBcpActual().setEstado("Finalizado");
        miPC.getBcpActual().setTiempoFin(new Date());
        String estadoActual = miPC.getBcpActual().getEstado();
        
        int indicePrueba = miPC.getBcps().indexOf(miPC.getBcpActual());
        tablaMemoria.setValueAt("Estado: " +estadoActual, indiceMemoriaBcpActual*21+1,1);
        tablaProcesos.setValueAt(estadoActual, indicePrueba, 2);
        indiceMemoriaBcpActual++;
        cantProcesosEjecutados++;
        boolean haySiguiente = miPC.getBcpActual().getSiguienteBPC()!=-1 && miPC.siguienteBCP();
        if (haySiguiente) {
            estadoActual = miPC.getBcpActual().getEstado();

            indicePrueba = miPC.getBcps().indexOf(miPC.getBcpActual());
            tablaMemoria.setValueAt("Estado: " + estadoActual, indiceMemoriaBcpActual * 21 + 1, 1);
            tablaProcesos.setValueAt(estadoActual, indicePrueba, 2);

            acInput.setText(Integer.toString(miPC.getBcpActual().getRegistros().get("AC").getValor()));
            axInput.setText(Integer.toString(miPC.getBcpActual().getRegistros().get("AX").getValor()));
            bxInput.setText(Integer.toString(miPC.getBcpActual().getRegistros().get("BX").getValor()));
            cxInput.setText(Integer.toString(miPC.getBcpActual().getRegistros().get("CX").getValor()));
            dxInput.setText(Integer.toString(miPC.getBcpActual().getRegistros().get("DX").getValor()));
            miPC.getBcpActual().setTiempoInicio(new Date());
            tablaMemoria.setValueAt("inicio: " + miPC.getBcpActual().getTiempoInicio().toString(), indiceMemoriaBcpActual * 21 + 14, 1);
        }else{
            if(miPC.siguienteBCP()){
                direccionMemoriaReservada=0;
                direccionMemoriaNormal = 21*5;
                for(int i = 0; i < tablaMemoria.getRowCount();i++){
                    tablaMemoria.setValueAt(null, i, 1);
                }
                indiceMemoriaBcpActual = 0;
                siguientesProgramas();
                miPC.getBcpActual().setTiempoInicio(new Date());
                tablaMemoria.setValueAt("inicio: " + miPC.getBcpActual().getTiempoInicio().toString(), indiceMemoriaBcpActual * 21 + 14, 1);
            }else{
                botSiguiente.setEnabled(false);
                terminarEjecucion = true;
                poblarEstadisticas();
                fEstadisticas.setVisible(true);
            }   
        }
    }    
    
    //rellena la tabla de estadisticas
    public void poblarEstadisticas(){
        int i = 0;
        for(BCP elemento:miPC.getBcps()){
            estadisticas.tablaEstadisticas.setValueAt(i, i, 0);
            estadisticas.tablaEstadisticas.setValueAt(elemento.getIdentificador(), i, 1);
            estadisticas.tablaEstadisticas.setValueAt(elemento.getTiempoInicio().toString(), i, 2);
            estadisticas.tablaEstadisticas.setValueAt(elemento.getTiempoFin().toString(), i, 3);

             long ms = elemento.getTiempoFin().getTime() - elemento.getTiempoInicio().getTime();
             long segundos = (ms % (60 * 1000)) / 1000;
             estadisticas.tablaEstadisticas.setValueAt(segundos + "Segundos", i, 4);

            i++;
        }
    }
    
    
    //Luego de la ejecución de la instrucción actualiza la interfaz grafica
    private void actualizarInput(String registro) {
        if (registro.equals("AX")) {//ax
            axInput.setText(Integer.toString(
                    miPC.getBcpActual().getRegistros().get(registro).getValor()));
        } else if (registro.equals("BX")) {//bx
            bxInput.setText(Integer.toString(
                    miPC.getBcpActual().getRegistros().get(registro).getValor()));
        } else if (registro.equals("CX")) {//cx
            cxInput.setText(Integer.toString(
                    miPC.getBcpActual().getRegistros().get(registro).getValor()));
        } else if (registro.equals("DX")) {//dx
            dxInput.setText(Integer.toString(
                    miPC.getBcpActual().getRegistros().get(registro).getValor()));
        } else if (registro.equals("AC")) {//ac
            acInput.setText(Integer.toString(
                    miPC.getBcpActual().getRegistros().get(registro).getValor()));
        }
    }
    
    
    
    /*
        Proceso de ejecucion automatico
        cada segundo ejecuta la siguiente instruccion
    */
    private void ejecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarActionPerformed
        // TODO add your handling code here:
        timer = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                botSiguiente.doClick();
                if (terminarEjecucion) {
                    timer.stop();
                }
            }
        });
        timer.start();

    }//GEN-LAST:event_ejecutarActionPerformed

    //Seleccionar archivo
    private void cargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarArchivoActionPerformed
        archivoValido = false;
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(cargarArchivo);
        archivos = chooser.getSelectedFiles();
        
        try {
            ArrayList<ArrayList<String[]>> archivosValidados = Asistente.validarArchivos(archivos);
            if(archivosValidados != null){
                try {
                    cargarEnDisco(archivosValidados);
                    inicializarMemoria();
                    miPC.setBcpActual(miPC.getBCPat(0));
                    miPC.getBcpActual().setEstado("En ejecución");
                    tablaProcesos.setValueAt("En ejecución", 0, 2);
                    bcpActualInput.setText("0");
                    pcInput.setText(Integer.toString(miPC.getBcpActual().getPC()));
                    irInput.setText(tablaMemoria.getValueAt(miPC.getBcpActual().getPC(), 1).toString());
                    actualizarValorEnReservada(1, "Estado: En ejecución");
                    miPC.getBcpActual().setTiempoInicio(new Date());
                    actualizarValorEnReservada(14, "Inicio: "+miPC.getBcpActual().getTiempoInicio().toString());
                } catch (InterruptedException ex) {
                    Logger.getLogger(cargarArchivo.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
            

        } catch (IOException ex) {
            Logger.getLogger(cargarArchivo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cargarArchivoActionPerformed

    //inicializa los primeros programas en memoria
    public void inicializarMemoria(){
        int cantProcesosEjecutar = 5;
        for(int proceso =0; proceso <cantProcesosEjecutar && proceso < archivos.length; proceso++){
            inicializarProceso(proceso, proceso);
        }
    }
    
    //avanza al siguiente set de programas
    public void siguientesProgramas(){
        int cantProcesosEjecutar = 5;
        for(int proceso =0; proceso <cantProcesosEjecutar && cantProcesosEjecutados+proceso < archivos.length; proceso++){
            inicializarProceso(cantProcesosEjecutados+proceso, proceso);
        }
        miPC.getBCPat(cantProcesosEjecutados).setEstado("En ejecución");
        tablaProcesos.setValueAt("En ejecución", cantProcesosEjecutados, 2);
    }
    
    
    //agrega todos los valores del bcp a memoria y cambia el estado a preparado
    public void inicializarProceso(int proceso, int i ) {
        miPC.getBCPat(proceso).setEstado("Preparado");
        BCP actual = miPC.getBCPat(proceso);
        actual.setSiguienteBPC(direccionMemoriaReservada + 21);
        String idProceso = actual.getIdentificador();

        tablaMemoria.setValueAt("identificador: " + idProceso, direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;

        tablaMemoria.setValueAt("estado " + idProceso + ": " + actual.getEstado(), direccionMemoriaReservada, 1);
        tablaProcesos.setValueAt(actual.getEstado(), miPC.getBcps().indexOf(actual), 2);
        direccionMemoriaReservada++;

        String[] archivoActual = getArchivoFromDisco(idProceso);
        actual.setPC(direccionMemoriaNormal);
        for (String instruccion : archivoActual) {
            tablaMemoria.setValueAt(instruccion, direccionMemoriaNormal, 1);
            direccionMemoriaNormal++;
        }

        tablaMemoria.setValueAt("Contador (PC): " + actual.getPC(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;

        tablaMemoria.setValueAt("AC: " + actual.getRegistros().get("AC").getValor(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;
        actualizarInput("AC");
        tablaMemoria.setValueAt("AX: " + actual.getRegistros().get("AX").getValor(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;
        actualizarInput("AX");
        tablaMemoria.setValueAt("BX: " + actual.getRegistros().get("BX").getValor(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;
        actualizarInput("BX");
        tablaMemoria.setValueAt("CX: " + actual.getRegistros().get("CX").getValor(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;
        actualizarInput("CX");
        tablaMemoria.setValueAt("DX: " + actual.getRegistros().get("DX").getValor(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;
        actualizarInput("DX");

        tablaMemoria.setValueAt("Pila 0: " + actual.getPila().get(0), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;
        tablaMemoria.setValueAt("Pila 1: " + actual.getPila().get(1), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;
        tablaMemoria.setValueAt("Pila 2: " + actual.getPila().get(2), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;
        tablaMemoria.setValueAt("Pila 3: " + actual.getPila().get(3), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;
        tablaMemoria.setValueAt("Pila 4: " + actual.getPila().get(4), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;

        tablaMemoria.setValueAt("Cpu actual: " + actual.getCpuActual(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;

        tablaMemoria.setValueAt("inicio: " + actual.getTiempoInicio(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;
        tablaMemoria.setValueAt("empleado: " + actual.getTiempoEmpleado(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;

        tablaMemoria.setValueAt("Estado interrupcion: " + actual.getEstadoInterrupcion(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;

        if(i==4 || miPC.getBcps().indexOf(actual)== archivos.length-1){
            actual.setSiguienteBPC(-1);
        }
        tablaMemoria.setValueAt("siguiente BCP: " + actual.getSiguienteBPC(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;

        actual.setBase(actual.getPC());
        tablaMemoria.setValueAt("Base: " + actual.getBase(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;

        actual.setAlcance(archivoActual.length);
        tablaMemoria.setValueAt("Alcance: " + actual.getAlcance(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;

        tablaMemoria.setValueAt("Prioridad: " + actual.getPrioridad(), direccionMemoriaReservada, 1);
        direccionMemoriaReservada++;

        miPC.setBCPat(proceso, actual);

    }
    
    //transfiere las instrucciones del disco a la memoria
    public String[] getArchivoFromDisco(String idProceso) {
        for(int i = 0;i< posActualReservada;i++){
            String[] valorFila = tablaDisco.getValueAt(i, 1).toString().split(",");
         
            String idArchivo =valorFila[0];
            int inicioArchivo = Integer.parseInt(valorFila[1].trim());
            int finArchivo = Integer.parseInt(valorFila[2].trim());
            if(idProceso.equals(valorFila[0])){
                String[] archivo = new String[finArchivo-inicioArchivo+1];
                int cont = 0;
                for(int j = inicioArchivo; j<=finArchivo;j++){
                    String instruccionString = tablaDisco.getValueAt(j, 1).toString();
                    archivo[cont] = instruccionString;
                    cont++;
                }
                return archivo;
            }
            
        }
        
        
        return null;
        
    }
    
    //Carga los programas al disco
    public void cargarEnDisco(ArrayList<ArrayList<String[]>> archivosValidados ) throws InterruptedException{
        
            posIni = archivos.length + 10;
            posActual = posIni;
            posIniReservada = 0;
            posActualReservada = 0;
            int i = 0;
            for (ArrayList<String[]> archivo : archivosValidados) {
                System.out.println("Cantidad de archivos: " + archivos.length);
                String temp = archivos[i].getName() + "," + Integer.toString(posActual) + ", " + Integer.toString(posActual + archivo.size()-1);
                tablaDisco.setValueAt(temp, posActualReservada, 1);
                
                crearBCP(archivos[i].getName(),posActualReservada);
                posActualReservada++;

                for (String[] instruccion : archivo) {
                    String strInstruccion = instruccion[0];
                    if (instruccion.length > 1) {
                        strInstruccion += " ";
                        for (int j = 1; j < instruccion.length; j++) {
                            strInstruccion += instruccion[j] + ", ";
                        }
                        strInstruccion = strInstruccion.substring(0, strInstruccion.length() - 2);
                    }
                    
          
                    tablaDisco.setValueAt(strInstruccion, posActual, 1);
                    posActual++;

                }
                i++;
            }  
            
    }
    
    //Crea el bcp correspondiente a un programa
    public void crearBCP(String nombre, int numeroBCP) throws InterruptedException{
        BCP bcpNuevo = new BCP(nombre);
        miPC.addBCP(bcpNuevo);
        tablaProcesos.setValueAt(numeroBCP, numeroBCP, 0);
        tablaProcesos.setValueAt(nombre, numeroBCP, 1);
        tablaProcesos.setValueAt(miPC.getBcps().get(numeroBCP).getEstado(), numeroBCP, 2);
        tablaejecucion.setValueAt("P "+nombre, numeroBCP, 0);
       
    }
    
    //agrega una columna a la tabla de cpu para mostrar el tiempo 
    public int agregarColumna(int fila , int colu){
        DefaultTableModel modelo = (DefaultTableModel) tablaejecucion.getModel();
        modelo.addColumn(colu);
        tablaejecucion.setModel(modelo);
        tablaejecucion.scrollRectToVisible(tablaejecucion.getCellRect(fila,colu, true));
        return 0;
    }
        

    
    private void dxInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dxInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dxInputActionPerformed

    private void irInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_irInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_irInputActionPerformed

    private void axInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_axInputActionPerformed

    private void bcpActualInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcpActualInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bcpActualInputActionPerformed

    private void cxInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxInputActionPerformed

   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cargarArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cargarArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cargarArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cargarArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cargarArchivo().setVisible(true);
                
                
            }
        });
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField acInput;
    private javax.swing.JTextField axInput;
    private javax.swing.JTextField bcpActualInput;
    private javax.swing.JButton botSiguiente;
    private javax.swing.JTextField bxInput;
    private javax.swing.JButton cargarArchivo;
    private javax.swing.JTextField cxInput;
    private javax.swing.JTextField dxInput;
    private javax.swing.JButton ejecutar;
    private javax.swing.JTextField inputPantalla;
    private javax.swing.JTextField irInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea pantalla;
    private javax.swing.JTextField pcInput;
    public static javax.swing.JTable tablaDisco;
    public static javax.swing.JTable tablaMemoria;
    public static javax.swing.JTable tablaProcesos;
    public static javax.swing.JTable tablaejecucion;
    // End of variables declaration//GEN-END:variables
}
